// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server_interface.proto

package greyvarproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("server_interface.proto", fileDescriptor_2ad2c4f41754552d) }

var fileDescriptor_2ad2c4f41754552d = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xf5, 0xa2, 0x10, 0x45, 0x21, 0x07, 0x95, 0x20, 0xac, 0xfa, 0x00, 0x39, 0xe8, 0x1b,
	0x28, 0x28, 0x5e, 0x16, 0xb1, 0x0f, 0x10, 0x62, 0xf9, 0x5d, 0x0a, 0xbb, 0x99, 0x3a, 0x33, 0xad,
	0xf4, 0xd5, 0x3d, 0x09, 0x69, 0xc4, 0xb6, 0xb0, 0xc7, 0xcc, 0xf7, 0xcd, 0xfc, 0x7f, 0xcc, 0x85,
	0x80, 0x7b, 0x70, 0x68, 0x92, 0x82, 0x3f, 0x63, 0x0d, 0xdf, 0x32, 0x29, 0xd9, 0xd3, 0x0d, 0x63,
	0xe8, 0x23, 0xe7, 0x97, 0x5b, 0xd5, 0xdb, 0x06, 0x49, 0x83, 0x52, 0x28, 0xfe, 0x0e, 0x22, 0x71,
	0x03, 0xf1, 0x45, 0x28, 0x63, 0xa5, 0x50, 0xd4, 0xb9, 0x70, 0xff, 0x73, 0x68, 0xce, 0xab, 0xec,
	0xbc, 0xfe, 0x25, 0xd9, 0xb5, 0x39, 0x7e, 0xa2, 0x94, 0x50, 0xab, 0x5d, 0xf9, 0x69, 0x9e, 0x2f,
	0xe3, 0x86, 0xd2, 0x3b, 0xbe, 0x3a, 0x88, 0xba, 0x9b, 0xfd, 0x82, 0xb4, 0x94, 0x04, 0x77, 0x07,
	0xf6, 0xd1, 0x9c, 0xbc, 0x6d, 0xe3, 0x00, 0xae, 0xa0, 0x5d, 0x6b, 0x2f, 0xe7, 0x2b, 0x6b, 0x7c,
	0x8f, 0xd4, 0x5d, 0x2d, 0x00, 0x4d, 0x6e, 0x54, 0xe6, 0xec, 0x05, 0x3a, 0x36, 0x7d, 0xe6, 0xb8,
	0x83, 0xbd, 0x5e, 0x24, 0xe7, 0xef, 0x95, 0x5a, 0xe2, 0x6e, 0xe7, 0x74, 0xb2, 0xf8, 0x7f, 0xf4,
	0xe3, 0x28, 0xc3, 0x87, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x3c, 0x48, 0xe2, 0x6d, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServerInterfaceClient is the client API for ServerInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerInterfaceClient interface {
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	PlayerSetup(ctx context.Context, in *NewPlayer, opts ...grpc.CallOption) (*NoResponse, error)
	GetServerFrame(ctx context.Context, in *ClientRequests, opts ...grpc.CallOption) (*ServerFrameResponse, error)
}

type serverInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerInterfaceClient(cc grpc.ClientConnInterface) ServerInterfaceClient {
	return &serverInterfaceClient{cc}
}

func (c *serverInterfaceClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/greyvarproto.ServerInterface/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverInterfaceClient) PlayerSetup(ctx context.Context, in *NewPlayer, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/greyvarproto.ServerInterface/PlayerSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverInterfaceClient) GetServerFrame(ctx context.Context, in *ClientRequests, opts ...grpc.CallOption) (*ServerFrameResponse, error) {
	out := new(ServerFrameResponse)
	err := c.cc.Invoke(ctx, "/greyvarproto.ServerInterface/GetServerFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerInterfaceServer is the server API for ServerInterface service.
type ServerInterfaceServer interface {
	Connect(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	PlayerSetup(context.Context, *NewPlayer) (*NoResponse, error)
	GetServerFrame(context.Context, *ClientRequests) (*ServerFrameResponse, error)
}

// UnimplementedServerInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedServerInterfaceServer struct {
}

func (*UnimplementedServerInterfaceServer) Connect(ctx context.Context, req *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedServerInterfaceServer) PlayerSetup(ctx context.Context, req *NewPlayer) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerSetup not implemented")
}
func (*UnimplementedServerInterfaceServer) GetServerFrame(ctx context.Context, req *ClientRequests) (*ServerFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerFrame not implemented")
}

func RegisterServerInterfaceServer(s *grpc.Server, srv ServerInterfaceServer) {
	s.RegisterService(&_ServerInterface_serviceDesc, srv)
}

func _ServerInterface_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInterfaceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyvarproto.ServerInterface/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInterfaceServer).Connect(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerInterface_PlayerSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPlayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInterfaceServer).PlayerSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyvarproto.ServerInterface/PlayerSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInterfaceServer).PlayerSetup(ctx, req.(*NewPlayer))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerInterface_GetServerFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInterfaceServer).GetServerFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyvarproto.ServerInterface/GetServerFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInterfaceServer).GetServerFrame(ctx, req.(*ClientRequests))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greyvarproto.ServerInterface",
	HandlerType: (*ServerInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _ServerInterface_Connect_Handler,
		},
		{
			MethodName: "PlayerSetup",
			Handler:    _ServerInterface_PlayerSetup_Handler,
		},
		{
			MethodName: "GetServerFrame",
			Handler:    _ServerInterface_GetServerFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_interface.proto",
}
