// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_interface.proto

package greyvarproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("client_interface.proto", fileDescriptor_37d44a20384b84ba) }

var fileDescriptor_37d44a20384b84ba = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x89, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x49, 0x2f, 0x4a, 0xad, 0x2c, 0x4b, 0x2c, 0x02, 0xf3, 0xa4, 0xe4, 0x8b,
	0x53, 0x8b, 0xca, 0x52, 0x8b, 0xe2, 0x4b, 0xf2, 0xe3, 0xa1, 0xea, 0x73, 0x53, 0x8b, 0x8b, 0x13,
	0xd3, 0x53, 0x8b, 0x21, 0xca, 0x8d, 0x6e, 0x31, 0x72, 0xf1, 0x3b, 0x83, 0x65, 0x3c, 0x61, 0x06,
	0x09, 0x59, 0x72, 0xb1, 0x07, 0xa7, 0x96, 0xb8, 0x17, 0x65, 0xa6, 0x08, 0x09, 0xe9, 0x21, 0x1b,
	0xa7, 0x07, 0x12, 0x93, 0x92, 0x40, 0x15, 0xf3, 0xcb, 0x0f, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0x55, 0x62, 0x10, 0x72, 0xe3, 0xe2, 0xf5, 0xcf, 0x73, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0xf4,
	0xcd, 0x2f, 0x4b, 0x4d, 0x11, 0x92, 0x44, 0x55, 0x8c, 0x24, 0x85, 0xd7, 0x1c, 0x17, 0x2e, 0x1e,
	0xff, 0xbc, 0x80, 0x9c, 0xc4, 0xca, 0xd4, 0xa2, 0xc0, 0xd2, 0xcc, 0x12, 0x21, 0x34, 0xb5, 0x08,
	0x19, 0x7c, 0xa6, 0x24, 0xb1, 0x81, 0xc5, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xad,
	0x98, 0x04, 0x2c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientInterfaceClient is the client API for ClientInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientInterfaceClient interface {
	SetGrid(ctx context.Context, in *Grid, opts ...grpc.CallOption) (*NoResponse, error)
	OnEntityMoved(ctx context.Context, in *EntityMoved, opts ...grpc.CallOption) (*NoResponse, error)
	OnPlayerQuit(ctx context.Context, in *PlayerQuit, opts ...grpc.CallOption) (*NoResponse, error)
}

type clientInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewClientInterfaceClient(cc *grpc.ClientConn) ClientInterfaceClient {
	return &clientInterfaceClient{cc}
}

func (c *clientInterfaceClient) SetGrid(ctx context.Context, in *Grid, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/greyvarproto.ClientInterface/SetGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientInterfaceClient) OnEntityMoved(ctx context.Context, in *EntityMoved, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/greyvarproto.ClientInterface/OnEntityMoved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientInterfaceClient) OnPlayerQuit(ctx context.Context, in *PlayerQuit, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/greyvarproto.ClientInterface/OnPlayerQuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientInterfaceServer is the server API for ClientInterface service.
type ClientInterfaceServer interface {
	SetGrid(context.Context, *Grid) (*NoResponse, error)
	OnEntityMoved(context.Context, *EntityMoved) (*NoResponse, error)
	OnPlayerQuit(context.Context, *PlayerQuit) (*NoResponse, error)
}

func RegisterClientInterfaceServer(s *grpc.Server, srv ClientInterfaceServer) {
	s.RegisterService(&_ClientInterface_serviceDesc, srv)
}

func _ClientInterface_SetGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Grid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientInterfaceServer).SetGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyvarproto.ClientInterface/SetGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientInterfaceServer).SetGrid(ctx, req.(*Grid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientInterface_OnEntityMoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMoved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientInterfaceServer).OnEntityMoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyvarproto.ClientInterface/OnEntityMoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientInterfaceServer).OnEntityMoved(ctx, req.(*EntityMoved))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientInterface_OnPlayerQuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerQuit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientInterfaceServer).OnPlayerQuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyvarproto.ClientInterface/OnPlayerQuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientInterfaceServer).OnPlayerQuit(ctx, req.(*PlayerQuit))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greyvarproto.ClientInterface",
	HandlerType: (*ClientInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGrid",
			Handler:    _ClientInterface_SetGrid_Handler,
		},
		{
			MethodName: "OnEntityMoved",
			Handler:    _ClientInterface_OnEntityMoved_Handler,
		},
		{
			MethodName: "OnPlayerQuit",
			Handler:    _ClientInterface_OnPlayerQuit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_interface.proto",
}
